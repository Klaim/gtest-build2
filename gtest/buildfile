./ : gtest-origin/googletest/ gtest-origin/googlemock/

# We follow the setup defined by the CMake files from gtest repository.

### Questions for Build2 Authors ######
#
# 1. Is there a way to create aliases for names/targets?
#    That would help define targets in sub-scopes, then alias them in higher scopes.
#
# 2. What is the difference between += and =+ ?
#
# 3. Why is "somedir/ : somedir/*" used when "somedir/" does not have a buildfile?
#    Isn't it inconsistent with the behaviour of build2 when doing "b" in a directory?
#
# 4. Why is
#      cxx.poptions =+ "-I$include_dir"
#    working but not
#      lib{lib_a, lib_b}: cxx.poptions =+ "-I$include_dir"
#     ?
#
# 5. When converting a library to build2, I often have to use a submodule with the real sources.
#    Could you make bdep detect that we use paths from the submodule in buildfile and automatically
#    update/init the submodule?
#
# 6. Same context: Having the submodule next to the buildfile can result in this kind of situation (gtest for example):
#
#      ./buildfile
#      ./src_base/real_repo/projectname/include/projectname/projectname.hpp
#      ./src_base/real_repo/projectname/include/projectname/submodule.hpp
#      ./src_base/real_repo/projectname/include/projectname/detail/xxxmodule.hpp
#      ./src_base/real_repo/projectname/include/projectname/detail/util/dontlookatme.hpp
#
#    Default install will put them all in install.root/include
#      ./include/projectname.hpp
#      ./include/submodule.hpp
#      ./include/xxxmodule.hpp
#      ./include/dontlookatme.hpp
#
#    I tried install.subdirs = true but I ended up with:
#      ./include/real_repo/projectname/include/projectname/projectname.hpp
#      ./include/real_repo/projectname/include/projectname/submodule.hpp
#      ./include/real_repo/projectname/include/projectname/detail/xxxmodule.hpp
#      ./include/real_repo/projectname/include/projectname/detail/util/dontlookatme.hpp
#
#    Is there another variable allowing to specify the directory in the path that should be the root in the mirrored install path?
#    That is, what do I need to do to obtain the following?
#
#      ./include/projectname/projectname.hpp
#      ./include/projectname/submodule.hpp
#      ./include/projectname/detail/xxxmodule.hpp
#      ./include/projectname/detail/util/dontlookatme.hpp
#
#    (So that it matches the expected install of the original build scripts)
#
# 7. It is surprising that this works (example inspired by cargo, as pointed by some people I discussed with):
#        bdep new anyproject
#        cd anyproject
#        b
#    But this does not work:
#        bdep new anyproject
#        cd anyproject
#        bdep update
#    It is a similar surprising weirdness that `b install` have no equivalent in bdep.
#
# 8. When a dependency package exists in the configuration being built but do not have a compatible version,
#    the report is not clear at all that this is the source of the issue and say
#       error: unknown dependency gtest ^1.8.0 of package libexample
#       info: repository E:\Projects\build2-libs\libexample appears to be broken
#       info: or the repository state could be stale
#    which is all incorrect. First, it might just be that the dependency is missing.
#    Second, if the dependency is not missing but don't have a compatible version, that's what should be reported,
#    with the dependency version currently available for this configuration.
#    Maybe it only happens with '-' versions?

## GTEST #############

gtest-origin/googletest/
{
  ./ : lib{gtest gtest_main}

  lib{gtest} : src/cxx{gtest-all} include/hxx{**}
  lib{gtest} : cxx.export.poptions += "-I$src_base/include"

  lib{gtest_main} : src/cxx{gtest_main} lib{gtest}
  # lib{gtest_main} : cxx.export.libs = lib{gtest}

  cxx.poptions =+ "-I$src_base/include" "-I$src_base/src" "-I$src_base"

  objs{*}: cxx.poptions += -DGTEST_CREATE_SHARED_LIBRARY
  libs{*}: cxx.export.poptions += "-DGTEST_LINKED_AS_SHARED_LIBRARY"

  hxx{*}: install         = include/gtest/
  hxx{*}: install.subdirs = true
}

## GMOCK #############

gtest-origin/googlemock/
{
  ./ : # ...
}