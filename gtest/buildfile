

# We try to follow the setup defined by the CMake files from gtest repository.

## GTEST #############

# gtest : Google Test library to use in your tests.
lib{gtest} : $gtest_src_dir/cxx{gtest-all} $gtest_include_dir/hxx{**}

# Check inside gtest-all.cc: Looks like some kind of manual "unity build"...
# All sources included must be mentionned as headers, even if it looks wrong.
lib{gtest}: $gtest_src_dir/cxx{* -gtest-all -gtest_main}: include = false
lib{gtest}: $gtest_src_dir/hxx{*}: install = false

# Makes sure the include directory is accessible to user code.
lib{gtest} : cxx.export.poptions += "-I$gtest_include_dir"

# gtest_main : library defining a main() so that you don't have to duplicate it in each program
./ : liba{gtest_main} : $gtest_src_dir/cxx{gtest_main} # We only support it as a static utility library (no content stripping).
liba{gtest_main} : bin.whole = true  # Keep the definition of main()

# All targets here need to have these directories accessible for including.
cxx.poptions =+ "-I$out_root" "-I$gtest_include_dir" "-I$gtest_dir" "-I$gtest_src_dir" "-I$src_base"

# Sources from the upstream directory also need some dirs to be accessible
../upstream/googletest/
{
  cxx.poptions =+ "-I$gtest_include_dir" "-I$gtest_dir"
  objs{*}: cxx.poptions += "-DGTEST_CREATE_SHARED_LIBRARY=1"
}

# DLL import/export symbol macros have to be activated/deactivated depending
# on if you are building the dynamic library or linking with it.
# Of course these special defines exists only if you use dynamic libraries.
objs{*}: cxx.poptions += "-DGTEST_CREATE_SHARED_LIBRARY=1"
libs{gtest}: cxx.export.poptions += "-DGTEST_LINKED_AS_SHARED_LIBRARY=1"

# Make sure the public headers are installed.
hxx{*} : install = false
include/hxx{*} :
{
  install = include/
  install.subdirs = true
}


