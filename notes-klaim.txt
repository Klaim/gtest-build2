
### Questions for Build2 Authors ######

1. Is there a way to create aliases for names/targets?
   That would help define targets in sub-scopes, then alias them in higher scopes.

=> Need more exploration.

2. What is the difference between += and =+ ?

=> += is appending
   =+ is prepending


3. Why is "somedir/ : somedir/*" used when "somedir/" does not have a buildfile?
   Isn't it inconsistent with the behaviour of build2 when doing "b" in a directory?

=> Side effect of inspiration from make - still looking inconsistent to me though.

4. Why is
     cxx.poptions =+ "-I$include_dir"
   working but not
     lib{lib_a, lib_b}: cxx.poptions =+ "-I$include_dir"
    ?
=> Might have been an old bug? Needs checks.

5. When converting a library to build2, I often have to use a submodule with the real sources.
   Could you make bdep detect that we use paths from the submodule in buildfile and automatically
   update/init the submodule?
=> Unfortunately it's not build2's role at that point, but git.

6. Same context: Having the submodule next to the buildfile can result in this kind of situation (gtest for example):
     
     ./buildfile
     ./src_base/real_repo/projectname/include/projectname/projectname.hpp
     ./src_base/real_repo/projectname/include/projectname/submodule.hpp
     ./src_base/real_repo/projectname/include/projectname/detail/xxxmodule.hpp
     ./src_base/real_repo/projectname/include/projectname/detail/util/dontlookatme.hpp

   Default install will put them all in install.root/include
     
     ./include/projectname.hpp
     ./include/submodule.hpp
     ./include/xxxmodule.hpp
     ./include/dontlookatme.hpp

   I tried `install.subdirs = true` but I ended up with:

     ./include/real_repo/projectname/include/projectname/projectname.hpp
     ./include/real_repo/projectname/include/projectname/submodule.hpp
     ./include/real_repo/projectname/include/projectname/detail/xxxmodule.hpp
     ./include/real_repo/projectname/include/projectname/detail/util/dontlookatme.hpp

   Is there another variable allowing to specify the directory in the path that should be the root in the mirrored install path?
   That is, what do I need to do to obtain the following?

     ./include/projectname/projectname.hpp
     ./include/projectname/submodule.hpp
     ./include/projectname/detail/xxxmodule.hpp
     ./include/projectname/detail/util/dontlookatme.hpp
   (So that it matches the expected install of the original build scripts)


7. It is surprising that this works (example inspired by cargo, as pointed by some people I discussed with):
       bdep new anyproject
       cd anyproject
       b
   But this does not work:
       bdep new anyproject
       cd anyproject
       bdep update
   It is a similar surprising weirdness that `b install` have no equivalent in bdep.



8. When a dependency package exists in the configuration being built but do not have a compatible version,
   the report is not clear at all that this is the source of the issue and say
      error: unknown dependency gtest ^1.8.0 of package libexample
      info: repository E:\Projects\build2-libs\libexample appears to be broken
      info: or the repository state could be stale
   which is all incorrect. 
   First, it might just be that the dependency is missing/not found.
   Second, if the dependency is not missing but don't have a compatible version, that's what should be reported,
   with the dependency versions currently available for this configuration.
   Maybe it only happens with '-' versions?

9. Request: add ways to manipulate strings (to forge name of targets)
   What is missing here: a way to remove something from a name (see samples in buildfile).

10. It is not clear to me how to variable trees to be stored in configuration.
    I can persist the config.* values that already exist or that are specified in CLI (using configure).
    I can use variables specified from CLI.
    I don't seem to be able to test a variable that should not exist in a tree by default.
    I can't persist variables that are not config.* (using configure)

11. Knowing which link error report comes from which linking command is almost impossible.
    I think I already pointed this: logs from processes specific to a project could be marked
    so that even when launched in parallel we can follow what is happening.

12. Build logs should always start with the path of the configuration, otherwise sometime we get an error
    (like "error: unable to import target gtest%lib{gtest}") without knowing in which configuration directory
    we tried to build.
=> I believe it's now displayed.
